
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'moduleleftORleftANDleftEQUALSNOT_EQUALSLESS_THANLESS_THAN_EQUALSGREATER_THANGREATER_THAN_EQUALSleftPLUSMINUSleftTIMESDIVIDEFLOOR_DIVIDEMODrightUPLUSUMINUSNOTrightPOWERAND ASSIGN BREAK CLASS COLON COMMA CONTINUE DEDENT DEF DIVIDE DIVIDE_ASSIGN DOT ELIF ELSE EQUALS FALSE FLOOR_DIVIDE FLOOR_DIVIDE_ASSIGN FOR GREATER_THAN GREATER_THAN_EQUALS ID IF IN INDENT LBRACE LBRACKET LESS_THAN LESS_THAN_EQUALS LPAREN MINUS MINUS_ASSIGN MOD MOD_ASSIGN NEWLINE NONE NOT NOT_EQUALS NUMBER OR PASS PLUS PLUS_ASSIGN POWER POWER_ASSIGN RBRACE RBRACKET RETURN RPAREN STRING TIMES TIMES_ASSIGN TRUE WHILEmodule : exprexpr : atomexpr : LPAREN expr RPARENatom : NUMBERatom : STRINGatom : TRUEatom : FALSEatom : NONEatom : IDexpr : PLUS expr %prec UPLUSexpr : MINUS expr %prec UMINUSexpr : NOT exprexpr : expr POWER expr %prec POWERexpr : expr TIMES expr\n        | expr DIVIDE expr\n        | expr FLOOR_DIVIDE expr\n        | expr MOD exprexpr : expr PLUS expr\n        | expr MINUS exprexpr : expr EQUALS expr\n        | expr NOT_EQUALS expr\n        | expr LESS_THAN expr\n        | expr LESS_THAN_EQUALS expr\n        | expr GREATER_THAN expr\n        | expr GREATER_THAN_EQUALS exprexpr : expr AND expr\n        | expr OR exprexpr : ID LPAREN arg_list_opt RPARENarg_list_opt : expr COMMA arg_list_opt\n        | exprarg_list_opt :'
    
_lr_action_items = {'LPAREN':([0,4,5,6,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[4,4,4,4,4,33,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'PLUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,],[5,19,-2,5,5,5,5,-9,-4,-5,-6,-7,-8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,19,-10,-11,-12,5,-13,-14,-15,-16,-17,-18,-19,19,19,19,19,19,19,19,19,-3,19,-28,5,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,],[6,20,-2,6,6,6,6,-9,-4,-5,-6,-7,-8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,20,-10,-11,-12,6,-13,-14,-15,-16,-17,-18,-19,20,20,20,20,20,20,20,20,-3,20,-28,6,]),'NOT':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'ID':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'STRING':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'TRUE':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FALSE':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'NONE':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'$end':([1,2,3,8,9,10,11,12,13,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,],[0,-1,-2,-9,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-3,-28,]),'POWER':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[14,-2,-9,-4,-5,-6,-7,-8,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-3,14,-28,]),'TIMES':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[15,-2,-9,-4,-5,-6,-7,-8,15,-10,-11,-12,-13,-14,-15,-16,-17,15,15,15,15,15,15,15,15,15,15,-3,15,-28,]),'DIVIDE':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[16,-2,-9,-4,-5,-6,-7,-8,16,-10,-11,-12,-13,-14,-15,-16,-17,16,16,16,16,16,16,16,16,16,16,-3,16,-28,]),'FLOOR_DIVIDE':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[17,-2,-9,-4,-5,-6,-7,-8,17,-10,-11,-12,-13,-14,-15,-16,-17,17,17,17,17,17,17,17,17,17,17,-3,17,-28,]),'MOD':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[18,-2,-9,-4,-5,-6,-7,-8,18,-10,-11,-12,-13,-14,-15,-16,-17,18,18,18,18,18,18,18,18,18,18,-3,18,-28,]),'EQUALS':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[21,-2,-9,-4,-5,-6,-7,-8,21,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,21,21,-3,21,-28,]),'NOT_EQUALS':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[22,-2,-9,-4,-5,-6,-7,-8,22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,22,22,-3,22,-28,]),'LESS_THAN':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[23,-2,-9,-4,-5,-6,-7,-8,23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,23,23,-3,23,-28,]),'LESS_THAN_EQUALS':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[24,-2,-9,-4,-5,-6,-7,-8,24,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,24,24,-3,24,-28,]),'GREATER_THAN':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[25,-2,-9,-4,-5,-6,-7,-8,25,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,25,25,-3,25,-28,]),'GREATER_THAN_EQUALS':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[26,-2,-9,-4,-5,-6,-7,-8,26,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,26,26,-3,26,-28,]),'AND':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[27,-2,-9,-4,-5,-6,-7,-8,27,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,27,-3,27,-28,]),'OR':([2,3,8,9,10,11,12,13,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[28,-2,-9,-4,-5,-6,-7,-8,28,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-3,28,-28,]),'RPAREN':([3,8,9,10,11,12,13,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,],[-2,-9,-4,-5,-6,-7,-8,49,-10,-11,-12,-31,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-3,52,-30,-28,-31,-29,]),'COMMA':([3,8,9,10,11,12,13,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,],[-2,-9,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-3,53,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'expr':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[2,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,51,]),'atom':([0,4,5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,53,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'arg_list_opt':([33,53,],[50,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> expr','module',1,'p_module','parser.py',111),
  ('expr -> atom','expr',1,'p_expr_atom','parser.py',118),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','parser.py',124),
  ('atom -> NUMBER','atom',1,'p_atom_number','parser.py',131),
  ('atom -> STRING','atom',1,'p_atom_string','parser.py',136),
  ('atom -> TRUE','atom',1,'p_atom_true','parser.py',141),
  ('atom -> FALSE','atom',1,'p_atom_false','parser.py',146),
  ('atom -> NONE','atom',1,'p_atom_none','parser.py',151),
  ('atom -> ID','atom',1,'p_atom_identifier','parser.py',157),
  ('expr -> PLUS expr','expr',2,'p_expr_unary_plus','parser.py',164),
  ('expr -> MINUS expr','expr',2,'p_expr_unary_minus','parser.py',170),
  ('expr -> NOT expr','expr',2,'p_expr_unary_not','parser.py',175),
  ('expr -> expr POWER expr','expr',3,'p_expr_power','parser.py',182),
  ('expr -> expr TIMES expr','expr',3,'p_expr_multiplicative','parser.py',188),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_multiplicative','parser.py',189),
  ('expr -> expr FLOOR_DIVIDE expr','expr',3,'p_expr_multiplicative','parser.py',190),
  ('expr -> expr MOD expr','expr',3,'p_expr_multiplicative','parser.py',191),
  ('expr -> expr PLUS expr','expr',3,'p_expr_additive','parser.py',197),
  ('expr -> expr MINUS expr','expr',3,'p_expr_additive','parser.py',198),
  ('expr -> expr EQUALS expr','expr',3,'p_expr_comparison','parser.py',206),
  ('expr -> expr NOT_EQUALS expr','expr',3,'p_expr_comparison','parser.py',207),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr_comparison','parser.py',208),
  ('expr -> expr LESS_THAN_EQUALS expr','expr',3,'p_expr_comparison','parser.py',209),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr_comparison','parser.py',210),
  ('expr -> expr GREATER_THAN_EQUALS expr','expr',3,'p_expr_comparison','parser.py',211),
  ('expr -> expr AND expr','expr',3,'p_expr_logical','parser.py',219),
  ('expr -> expr OR expr','expr',3,'p_expr_logical','parser.py',220),
  ('expr -> ID LPAREN arg_list_opt RPAREN','expr',4,'p_expr_call','parser.py',228),
  ('arg_list_opt -> expr COMMA arg_list_opt','arg_list_opt',3,'p_arg_list_opt','parser.py',241),
  ('arg_list_opt -> expr','arg_list_opt',1,'p_arg_list_opt','parser.py',242),
  ('arg_list_opt -> <empty>','arg_list_opt',0,'p_arg_list_opt_empty','parser.py',249),
]
